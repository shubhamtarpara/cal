import React, { useEffect, useState } from 'react';
import './App.css'
function App() {
  const [loanAmount, setLoanAmount] = useState(100000);
  const [interestRate, setInterestRate] = useState(10);
  const [loanTenure, setLoanTenure] = useState(10);
  const [tenureType, setTenureType] = useState('yearly'); 
  const [prePayments, setPrePayments] = useState([]);
  const [loanDetails, setLoanDetails] = useState([]);

  const calculateEMI = () => {
    const principalAmount = parseFloat(loanAmount);
    const annualInterestRate = parseFloat(interestRate);
    const tenureInYears = parseFloat(loanTenure);

    const monthlyInterestRate = (annualInterestRate / 12) / 100;
    const numberOfEMIs = tenureType === 'yearly' ? tenureInYears : tenureInYears * 12; 

    const EMI =
      (principalAmount * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfEMIs)) /
      (Math.pow(1 + monthlyInterestRate, numberOfEMIs) - 1);

    const newLoanDetails = [];
    let openingBalance = principalAmount;

    for (let year = 0; year < numberOfEMIs; year++) {

      const interest = openingBalance * monthlyInterestRate;
      const principal = EMI - interest;
      const prepayment = prePayments[year] || 0;
      const outstandingBalance = openingBalance - principal - prepayment;

      newLoanDetails.push({
        year,
        openingBalance,
        EMI,
        interest,
        principal,
        outstandingBalance,
        prepayment,
      });

      openingBalance = outstandingBalance;
    }

    setLoanDetails(newLoanDetails);
  };

  const handlePrepaymentChange = (event, index) => {
    const newPrePayments = [...prePayments];
    newPrePayments[index] = parseFloat(event.target.value);
    setPrePayments(newPrePayments);
  };

  useEffect(() => {
    calculateEMI();
  }, [prePayments]);

  return (
    <div className="calculator-container">
    <h1>Home Loan EMI Calculator</h1>
    <div>
      <label className="input-label">Loan Amount:</label>
      <input
        type="number"
        className="input-field"
        value={loanAmount}
        onChange={(e) => setLoanAmount(e.target.value)}
      />
    </div>
    <div>
      <label className="input-label">Interest Rate:</label>
      <input
        type="number"
        className="input-field"
        value={interestRate}
        onChange={(e) => setInterestRate(e.target.value)}
      />
    </div>
    <div>
      <label className="input-label">Loan Tenure (years):</label>
      <input
        type="number"
        className="input-field"
        value={loanTenure}
        onChange={(e) => setLoanTenure(e.target.value)}
      />
    </div>
    <div>
        <label className="input-label">Loan Tenure:</label>

        <select
          className="input-field"
          value={tenureType}
          onChange={(e) => setTenureType(e.target.value)}
        >
          <option value="yearly">Years</option>
          <option value="monthly">Months</option>
        </select>
      </div>
    <button className="calculate-button" onClick={calculateEMI}>Calculate</button>
    <table className="loan-table">
      <thead>
        <tr>
          <th>Year</th>
          <th>Opening Balance</th>
          <th>EMI</th>
          <th>Interest</th>
          <th>Principal</th>
          <th>Outstanding Balance</th>
          <th>Prepayment</th>
        </tr>
      </thead>
      <tbody>
        {loanDetails.map((detail, index) => (
          <tr key={index}>
            <td>{Math.ceil(detail.year)}</td>
            <td>{Math.ceil(detail.openingBalance)}</td>
            <td>{Math.ceil(detail.EMI)}</td>
            <td>{Math.ceil(detail.interest)}</td>
            <td>{Math.ceil(detail.principal)}</td>
            <td>{Math.ceil(detail.outstandingBalance)}</td>
            <td>
              <input
              
                className="input-field"
               
                onBlur={(e) => handlePrepaymentChange(e, index)}
              />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  );
}

export default App;
